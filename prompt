SCSD is both a new text file format for storing tabular data and an API for
manipulating the tables inside. The definitive guide for the file format can be
found in `./README.md`. We are building a Common Lisp library called SCSD. Its
code will reside in the current directory, which is its git repository. The
library will provide functions to parse SCSD, serialize (write out) SCSD, and
work with SCSD tables in-memory. Functions for working with tables should
include the basic relational database operators -- natural join, natural
equijoin, cartesian product, row filter, and column filter.

Consult the `./AI.md` file early and often. If there exists no `./AI.md` file,
create one. In it, keep notes for yourself on what you're doing. This is so
that if the AI session is interrupted, you can pick up from where you left off
by reading the file again. Make sure to include notes for yourself not just on
what you were doing, but your understanding of the problem. Try to append to
this file instead of rewriting it. Reuse as much knowledge from it as you can,
if it already exists when you read it. It should be a log or diary of your
accomplishments and what you have done, seen, heard, and felt. There isn't ever
really a reason to delete content from this file if it already exists.

Consult the `./TODO.md` file early and often as well. If there exists no
`./TODO.md` file, create one. This file is both to communicate to any future AI
sessions what needs done and what to do next, but also to communicate to me
what tasks you plan on doing next. Think of this as your "sprint board". In it
you will break down the tasks into incremental chunks that you can get done a
little at a time. Incremental development is important, because when the AI
session gets interrupted, you can sometimes forget what you were doing. Going a
little bit at a time also helps me because if I need to help code or take over,
I'm not left with something unmanageable and I can pick up where you left off.
Keep several lists up to date in this file: What you are currently working on
("In Progress"), what you are blocked on or stumped on ("Blocked"), what you
have done ("Done"), what you have not done ("Backlog"), and tasks that need
more refinement ("Triage"). Break down tasks very small in the TODO.md file.
Things like "add the ability to parse the database name", "add the ability to
parse the preamble", etc. We need to be *really* incremental. We need to keep
the code working throughout. This helps you avoid hallucinations and keeps you
from getting confused. Try to add tasks and modify existing ones, but please
try not to rewrite it. We have had trouble in the past with this. Feel free to
delete tasks and add new ones, but try to reuse as much content of and
knowledge from this file as you can, if it already exists when you read it.

Commit and push every time you complete a feature. Provide detailed commit
messages. Feel free to use `git annotate` or look at previous commits for a
reference of what was done as needed, especially if we are starting out on a
new AI session. Include in messages that the commit was done by you (rather
than by me) so you can differentiate in future AI sessions who worked on what.

If or you have already done those things, or once you have done them, begin
working the tasks in sprint board in `./TODO.md`. Make sure to continue to
update your `AI.md` journal as we go. The code will be compiled using `ros
build` and tested using `ros test`. Keep the code in a running, working state
as much as possible. In order to execute any lisp code using ros, make `*.ros`
scripts instead of using `ros --eval`. Keep them in a folder called `./scripts`
and update them as needed, reusing them when appropriate. In particular, I have
written a script called `scripts/test.sh` which you should use as the primary
tool to run the tests. This helps reduce rate limiting errors. We've also had
trouble in the past with `ros --eval` dropping into a debugger and hanging the
AI session. You should check this folder to see if any AIs from previous
sessions have already made a script that you can use.  As you complete or get
stuck on tasks, update the `./TODO.md` file with your current status and
progress. Feel free to break down tasks further as needed.

Sometimes there will be a compilation error that you do not understand. In this
case, I recommend splitting up functions or forms into smaller ones. Forms
(e.g. function definitions) should not exceed 30 lines or so. Functions and
other forms should be grouped together using your best judgement as to what
should be where, but they should be around 300 to 700 lines. They should not
exceed 1000 lines in length. This helps keep compilation errors understandable.

We often get rate limited by AI APIs. Between every meaningful action,
therefore, I request that you prepend `sleep 30 &&` to slow the rate of token
use down sufficient to stay below the rate limiting. Also, when viewing a file,
instead of using the developer `view` action, use the `cat` command so that you
can prepend that `sleep 30 &&` to it, as in `sleep 30 && cat ...`.

Thanks.
